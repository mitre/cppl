		    One Way Authentication Example

The One Way Authentication Example demonstrates features of CPPL
programs.  The basis of these examples is a very simple authentication
protocol.  For starters, one can run the auth.sh, and look at its
output.

$ sh auth.sh

A more detailed description of the two ways in which it is used
follow.

TWO PARTY AUTHENTICATION

The simplest example is two party one way authentication.  Both the
responder and the initiator are run on the same machine, but in two
different shells.

[1] $ ./resp

[2] $ ./init resp.ks

The results printed will include the nonces generated by the protocol.
You should be able to match the nonces in both outputs, thereby
confirming that the communication was between these two programs.

In this example, the initiator gets the public key of the responder
from the trust store resp.ks, which is generated by the responder.
You can see what happens if the initiator fails to get the responder's
public key with:

[1] $ ./resp

[2] $ ./init

You will note that a guarantee fails, and the initiator aborts.

THREE PARTY AUTHENTICATION

In three party one way authentication, the initiator has the option of
getting the responder's public key from a certificate authority.  It
does so by making used of subprotocol calls.  The programs is this
section can be run on different machines, but these instructions will
describe how to run them on the same machine, in three different
shells.

The initiator supports the following command line arguments:

$ ./init --help
Usage: init [options] [ key-store ...]
  -r      - specify responder
  --      - treat remaining args as file names, where - means stdin
  -help  Display this list of options
  --help  Display this list of options

The three party authentication example requires a certificate
authority, in addition to the initiator and the responder.
Additionally, the initiator must use the certificate authority's trust
store.  In this example, since all programs are run on same machine,
the responder's port is not the default port.

[1] $ ./resp -p 8001

[2] $ ./ca

[3] $ ./init -p 8001 ca.ks

Alternatively, one can run the certificate authority on a port other
than the default port.

[1] $ ./resp

[2] $ ./ca -p 8001

[3] $ ./init ca.ks
